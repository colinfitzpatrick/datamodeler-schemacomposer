
package com.xsynergy.schemacomposer;

import com.xsynergy.datamodeler.Util;
import com.xsynergy.schemacomposer.generate.Generate;
import com.xsynergy.schemacomposer.model.Model;

import com.xsynergy.schemacomposer.model.ModelPersistance;
import com.xsynergy.schemacomposer.model.SchemaAttribute;
import com.xsynergy.schemacomposer.model.SchemaNode;

import java.io.IOException;

import java.io.StringReader;

import java.net.URL;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.tree.DefaultTreeModel;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import javax.xml.parsers.ParserConfigurationException;

import oracle.dbtools.crest.model.Task;
import oracle.dbtools.crest.model.design.Design;
import oracle.dbtools.crest.model.design.logical.LogicalDesign;

import oracle.dbtools.crest.swingui.ApplicationView;

import oracle.ide.Context;
import oracle.ide.controls.tree.JMutableTreeNode;
import oracle.ide.controls.tree.JTreeCellData;
import oracle.ide.model.Project;
import oracle.ide.util.TriStateBoolean;

import org.w3c.dom.Document;

import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;


/**
 *
 * @author colin
 */
public class Panel
  extends javax.swing.JPanel
{
  @SuppressWarnings("compatibility:7907351815027656064")
  private static final long serialVersionUID = 1L;

  @SuppressWarnings("oracle.jdeveloper.java.field-not-serializable")
  Model model = null;


  private Icon iconRoot = null;
  private Icon iconAttribute = null;
  private Icon iconChoice = null;
  private Icon iconOpen = null;
  private Icon iconClosed = null;

  private boolean reloading = false;

  private String subviewName = null;

  /** Creates new form Panel */
  @SuppressWarnings("unchecked")
  public Panel(String subviewName)
  {
    assert(subviewName != null);
    
    initComponents();

    URL url = this.getClass().getResource("/com/xsynergy/schemacomposer/icon/root.png");
    this.iconRoot = new ImageIcon(url);

    url = this.getClass().getResource("/com/xsynergy/schemacomposer/icon/attribute.png");
    this.iconAttribute = new ImageIcon(url);

    url = this.getClass().getResource("/com/xsynergy/schemacomposer/icon/choice.png");
    this.iconChoice = new ImageIcon(url);

    url = this.getClass().getResource("/com/xsynergy/schemacomposer/icon/open.png");
    this.iconOpen = new ImageIcon(url);

    url = this.getClass().getResource("/com/xsynergy/schemacomposer/icon/closed.png");
    this.iconClosed = new ImageIcon(url);

    this.subviewName = subviewName;

    tree.setExpandsSelectedPaths(true);

    model = null;
    reloading = true;

    model = new Model(this.subviewName);

    SchemaNode nodes[] = model.getNodes();

    for (SchemaNode node: nodes)
    {
      comboRootEntity.addItem(node.getName());

      if (subviewName.contains(node.getName()))
      {
        model.setRoot(node);

        comboRootEntity.setSelectedItem(node.getName());
      }
    }

    String xml = ModelPersistance.getInstance().load(model);
    if(xml != null)
      dirtyParser(xml);
    else
      refresh();
    
    reloading = false;

  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  private void initComponents()//GEN-BEGIN:initComponents
  {

    jPanel1 = new javax.swing.JPanel();
    jLabel2 = new javax.swing.JLabel();
    comboRootEntity = new javax.swing.JComboBox();
    ignoreFK = new javax.swing.JCheckBox();
    ignoreResolvers = new javax.swing.JCheckBox();
    button = new javax.swing.JButton();
    filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
    jSeparator1 = new javax.swing.JSeparator();
    jScrollPane1 = new javax.swing.JScrollPane();
    tree = new oracle.ide.controls.tree.CustomJTree();

    jLabel2.setLabelFor(comboRootEntity);
    jLabel2.setText("Root Element");

    comboRootEntity.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        comboRootEntityItemStateChanged(evt);
      }
    });
    comboRootEntity.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        comboRootEntityActionPerformed(evt);
      }
    });
    comboRootEntity.addPropertyChangeListener(new java.beans.PropertyChangeListener()
    {
      public void propertyChange(java.beans.PropertyChangeEvent evt)
      {
        comboRootEntityPropertyChange(evt);
      }
    });

    ignoreFK.setSelected(true);
    ignoreFK.setText("Ignore Foreign Keys");
    ignoreFK.setToolTipText("Ignore Foreign Keys in Entities");
    ignoreFK.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        ignoreFKItemStateChanged(evt);
      }
    });
    ignoreFK.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        ignoreFKActionPerformed(evt);
      }
    });

    ignoreResolvers.setText("Ignore Resolvers");
    ignoreResolvers.setToolTipText("Ignore Entites that only Contains Foreign Keys");
    ignoreResolvers.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        ignoreResolversItemStateChanged(evt);
      }
    });
    ignoreResolvers.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        ignoreResolversActionPerformed(evt);
      }
    });

    button.setText("Generate");
    button.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        buttonActionPerformed(evt);
      }
    });
    
    outputType = new JComboBox();
    outputType.setModel(new DefaultComboBoxModel(new String[] {"XSD", "JSON Schema"}));

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1Layout.setHorizontalGroup(
    	jPanel1Layout.createParallelGroup(Alignment.LEADING)
    		.addGroup(jPanel1Layout.createSequentialGroup()
    			.addComponent(jLabel2)
    			.addPreferredGap(ComponentPlacement.UNRELATED)
    			.addComponent(comboRootEntity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    			.addPreferredGap(ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
    			.addComponent(ignoreFK)
    			.addPreferredGap(ComponentPlacement.RELATED)
    			.addComponent(ignoreResolvers)
    			.addGap(11)
    			.addComponent(outputType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    			.addPreferredGap(ComponentPlacement.UNRELATED)
    			.addComponent(button)
    			.addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
    	jPanel1Layout.createParallelGroup(Alignment.LEADING)
    		.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
    			.addComponent(jLabel2)
    			.addComponent(comboRootEntity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
    			.addComponent(button)
    			.addComponent(ignoreFK)
    			.addComponent(ignoreResolvers)
    			.addComponent(outputType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
    );
    jPanel1.setLayout(jPanel1Layout);

    tree.addTreeCellCheckedListener(new oracle.ide.controls.tree.TreeCellCheckedListener()
    {
      public void cellChecked(oracle.ide.controls.tree.TreeCellCheckedEvent evt)
      {
        treeCellChecked(evt);
      }
      public void cellUnchecked(oracle.ide.controls.tree.TreeCellCheckedEvent evt)
      {
      }
    });
    tree.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener()
    {
      public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException
      {
        treeTreeWillExpand(evt);
      }
      public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException
      {
      }
    });
    tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
    {
      public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
      {
        treeValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(tree);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(253, 253, 253))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jSeparator1))
            .addContainerGap())
          .addComponent(jScrollPane1)))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
  }//GEN-END:initComponents

  private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt)//GEN-FIRST:event_treeValueChanged
  {//GEN-HEADEREND:event_treeValueChanged
  
    
  }//GEN-LAST:event_treeValueChanged

  private void treeCellChecked(oracle.ide.controls.tree.TreeCellCheckedEvent evt)//GEN-FIRST:event_treeCellChecked
  {//GEN-HEADEREND:event_treeCellChecked
    
    try
    {           
      JMutableTreeNode changed = (JMutableTreeNode) evt.getSource();
      JMutableTreeNode changedParent = (JMutableTreeNode)((JMutableTreeNode) evt.getSource()).getParent();
      
      JTreeCellData cell = (JTreeCellData) changed.getUserObject();

      SchemaNode node = (SchemaNode) ((JTreeCellData) changed.getUserObject()).getUserObject();
      SchemaNode parentNode = (SchemaNode) ((JTreeCellData) changedParent.getUserObject()).getUserObject();

      for (SchemaAttribute attribute: node.getAttributes())
      {
        JTreeCellData attributeCell =
          new JTreeCellData(this.iconAttribute, attribute.getName(), true, TriStateBoolean.TRUE);
        
        if(attribute.isForeignKey())
          attributeCell.setCheckBoxState(TriStateBoolean.FALSE);
        
        attributeCell.setToolTipText(attribute.getDataType().getDatatypeAsString());
        attributeCell.setUserObject(attribute);

        JMutableTreeNode attributeNode = new JMutableTreeNode(attributeCell, false);

        changed.add(attributeNode);
        
      }

      for (SchemaNode child: node.getChildren())
      {
        String childName = child.getName();
        String parentName = parentNode.getName();
      
        Icon icon = child.getType()==SchemaNode.Type.RELATIONAL?iconOpen:iconChoice;
      
        JTreeCellData entityCell = new JTreeCellData(icon, child.getName(), true, TriStateBoolean.FALSE);
        JMutableTreeNode entityNode = new JMutableTreeNode(entityCell, true);
        entityCell.setUserObject(child);

        changed.add(entityNode);
      }

      //tree.expandAllRows();
      //redraw(null);    
    }
    catch (Throwable e)
    {
      e.toString();
    }

  }//GEN-LAST:event_treeCellChecked

  private void treeTreeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException//GEN-FIRST:event_treeTreeWillExpand
  {//GEN-HEADEREND:event_treeTreeWillExpand

  }//GEN-LAST:event_treeTreeWillExpand

  private void buttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_buttonActionPerformed
  {//GEN-HEADEREND:event_buttonActionPerformed
    
     URL url =  this.getClass().getResource("/com/xsynergy/schemacomposer/generate/basic.xsl"); 
     String extension = ".xsd";
      
    if(getOutputType().getSelectedItem().toString() == "JSON Schema")
    {
	url =  this.getClass().getResource("/com/xsynergy/schemacomposer/generate/basic.xsl"); 
	extension = ".json";
    }
      
    //ApplicationView appView = ApplicationView.getInstance();
  
    ModelPersistance save = ModelPersistance.getInstance();
    Generate generate = new Generate(tree);
    generate.createModel(this.subviewName, url, extension, this.ignoreResolvers.isSelected());
        
    save.save(model, generate);
    
  }//GEN-LAST:event_buttonActionPerformed

  private void ignoreResolversActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ignoreResolversActionPerformed
  {//GEN-HEADEREND:event_ignoreResolversActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_ignoreResolversActionPerformed

  private void ignoreResolversItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_ignoreResolversItemStateChanged
  {//GEN-HEADEREND:event_ignoreResolversItemStateChanged

  }//GEN-LAST:event_ignoreResolversItemStateChanged

  private void ignoreFKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ignoreFKActionPerformed
  {//GEN-HEADEREND:event_ignoreFKActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_ignoreFKActionPerformed

  private void ignoreFKItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_ignoreFKItemStateChanged
  {//GEN-HEADEREND:event_ignoreFKItemStateChanged

    redraw(null);
  }//GEN-LAST:event_ignoreFKItemStateChanged

  private void comboRootEntityPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_comboRootEntityPropertyChange
  {//GEN-HEADEREND:event_comboRootEntityPropertyChange

  }//GEN-LAST:event_comboRootEntityPropertyChange

  private void comboRootEntityActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comboRootEntityActionPerformed
  {//GEN-HEADEREND:event_comboRootEntityActionPerformed
    // TODO add your handling code here:
  }//GEN-LAST:event_comboRootEntityActionPerformed

  private void comboRootEntityItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_comboRootEntityItemStateChanged
  {//GEN-HEADEREND:event_comboRootEntityItemStateChanged
    if(this.reloading == true)
      return;

    SchemaNode nodes[] = model.getNodes();

    // For every entity
    for (SchemaNode node: nodes)
    {
      if(comboRootEntity.getSelectedItem().toString().equals(node.getName()) )
      {
        model.setRoot(node);
      }
    }

    refresh();
  }//GEN-LAST:event_comboRootEntityItemStateChanged

  private void dirtyParser(String xml)
  {
    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
    DocumentBuilder builder;
    Document doc;
    try
    {
      builder = factory.newDocumentBuilder();
      InputSource is = new InputSource(new StringReader(xml));
      doc = builder.parse(is);
    }
    catch (ParserConfigurationException e)
    {
        Util.log(Util.LogLevel.DEBUG, "Error Parsing saved property", e);
        return;
    }
    catch (IOException e)
    {
      Util.log(Util.LogLevel.DEBUG, "Error Parsing saved property", e);
      return;
    }
    catch (SAXException e)
    {
      Util.log(Util.LogLevel.DEBUG, "Error Parsing saved property", e);
      return;
    }

    Node xmlNode = doc.getFirstChild();
    

    Util.log(Util.LogLevel.DEBUG, "Root entity name " + xmlNode.getNodeName());
    Util.log(Util.LogLevel.DEBUG, "Number of attributes" + xmlNode.getAttributes().getLength());
    Util.log(Util.LogLevel.DEBUG, "Schema Root Name" + xmlNode.getAttributes().getNamedItem("name"));

    String rootEntity = xmlNode.getAttributes().getNamedItem("name").getNodeValue();
    
    SchemaNode rootNode = model.findNodeByname(rootEntity);

    this.model.setRoot(rootNode);
    this.comboRootEntity.setSelectedItem(rootNode.getName());

    DefaultTreeModel treeModel = (DefaultTreeModel) tree.getModel();
    treeModel.setRoot(null);

    assert (rootNode != null): "Model not correctly loaded";

    JTreeCellData rootCell = new JTreeCellData(iconRoot, rootNode.getName(), true, TriStateBoolean.FALSE);
    rootCell.setUserObject(rootNode);
    
    JMutableTreeNode root = new JMutableTreeNode(rootCell);
    
    for (SchemaAttribute attribute: rootNode.getAttributes())
    {
      JTreeCellData attributeCell =
        new JTreeCellData(this.iconAttribute, attribute.getName(), true, TriStateBoolean.TRUE);
      
      if(attribute.isForeignKey())
      {
        if(ignoreFK.isSelected())
        {
          attributeCell.setCheckBoxState(TriStateBoolean.FALSE);    
        }
        else
        {
          attributeCell.setCheckBoxState(TriStateBoolean.TRUE);    
        }
      }
      attributeCell.setToolTipText(attribute.getDataType().getDatatypeAsString());
      attributeCell.setUserObject(attribute);
    
      JMutableTreeNode attributeNode = new JMutableTreeNode(attributeCell, false);
    
      root.add(attributeNode);
    }
    

    treeLoader(root, xmlNode);
    
    treeModel.setRoot(root);

  }

  private void treeLoader(JMutableTreeNode tree, Node parentnode)
  {
    int childCount = parentnode.getChildNodes().getLength();
    
    NodeList nodes = parentnode.getChildNodes();
    
    for(int counter = 0; counter < childCount; counter++)
    {
      Node node = nodes.item(counter);
      
      if(node.getNodeName().equals("entity") || node.getNodeName().equals("supertype"))
      {
          String entityName = node.getAttributes().getNamedItem("name").getNodeValue();
          SchemaNode entity = model.findNodeByname(entityName);
                  
          Icon icon = entity.getType()==SchemaNode.Type.RELATIONAL?iconOpen:iconChoice;
        
          JTreeCellData entityCell = new JTreeCellData(icon, entityName, true, TriStateBoolean.FALSE);
          JMutableTreeNode entityNode = new JMutableTreeNode(entityCell, true);
          entityCell.setUserObject(entity);
          
          for (SchemaAttribute attribute: entity.getAttributes())
          {
            JTreeCellData attributeCell =
              new JTreeCellData(this.iconAttribute, attribute.getName(), true, TriStateBoolean.TRUE);
            
            if(attribute.isForeignKey())
            {
              if(ignoreFK.isSelected())
              {
                attributeCell.setCheckBoxState(TriStateBoolean.FALSE);    
              }
              else
              {
                attributeCell.setCheckBoxState(TriStateBoolean.TRUE);    
              }
            }
            attributeCell.setToolTipText(attribute.getDataType().getDatatypeAsString());
            attributeCell.setUserObject(attribute);
    
            JMutableTreeNode attributeNode = new JMutableTreeNode(attributeCell, false);
    
            entityNode.add(attributeNode);
          }
          
          tree.add(entityNode);
          
          treeLoader(entityNode, node);
      }
      
    }  
  }

  private void redraw(JMutableTreeNode rootNode)
  {
    if(rootNode == null)
      rootNode  = (JMutableTreeNode)tree.getModel().getRoot();
      
    for(int i=0; i< tree.getModel().getChildCount(rootNode);i++)
    {
      JMutableTreeNode node = (JMutableTreeNode)tree.getModel().getChild(rootNode, i);
      
      JTreeCellData cell = (JTreeCellData)node.getUserObject();
      
      Object obj = cell.getUserObject();
    
      if(obj instanceof SchemaAttribute)
      {
        SchemaAttribute attribute = (SchemaAttribute)obj;
      
        if(attribute.isForeignKey())
        {
          if(ignoreFK.isSelected())
          {
            cell.setCheckBoxState(TriStateBoolean.FALSE); 
          }
          else
          {
            cell.setCheckBoxState(TriStateBoolean.TRUE); 
          }
        }
      }
      else
      {
        redraw(node);
      }
      
      ((DefaultTreeModel) tree.getModel()).nodeChanged(node);
      
    }
    
  }

  private void refresh()
  {

    DefaultTreeModel treeModel = (DefaultTreeModel) tree.getModel();
    treeModel.setRoot(null);

    SchemaNode rootNode = this.model.getRoot();

    if (rootNode == null)
      return;

    assert (rootNode != null): "Model not correctly loaded";


    JTreeCellData rootCell = new JTreeCellData(iconRoot, rootNode.getName(), true, TriStateBoolean.FALSE);
    rootCell.setUserObject(rootNode);
    
    JMutableTreeNode root = new JMutableTreeNode(rootCell);

    for (SchemaAttribute attribute: rootNode.getAttributes())
    {
      JTreeCellData attributeCell =
        new JTreeCellData(this.iconAttribute, attribute.getName(), true, TriStateBoolean.TRUE);
      
      if(attribute.isForeignKey())
      {
        if(ignoreFK.isSelected())
        {
          attributeCell.setCheckBoxState(TriStateBoolean.FALSE);    
        }
        else
        {
          attributeCell.setCheckBoxState(TriStateBoolean.TRUE);    
        }
      }
      attributeCell.setToolTipText(attribute.getDataType().getDatatypeAsString());
      attributeCell.setUserObject(attribute);

      JMutableTreeNode attributeNode = new JMutableTreeNode(attributeCell, false);

      root.add(attributeNode);
    }

    for (SchemaNode child: rootNode.getChildren())
    {
      Icon icon = child.getType()==SchemaNode.Type.RELATIONAL?iconOpen:iconChoice;
      
      JTreeCellData entityCell = new JTreeCellData(icon, child.getName(), true, TriStateBoolean.FALSE);
      JMutableTreeNode entityNode = new JMutableTreeNode(entityCell, true);
      entityCell.setUserObject(child);

      root.add(entityNode);
    }


    treeModel.setRoot(root);
    //redraw(null);

  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton button;
  private javax.swing.JComboBox comboRootEntity;
  private javax.swing.Box.Filler filler2;
  private javax.swing.JCheckBox ignoreFK;
  private javax.swing.JCheckBox ignoreResolvers;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSeparator jSeparator1;
  private oracle.ide.controls.tree.CustomJTree tree;
  private JComboBox outputType;
	public JComboBox getOutputType() {
		return outputType;
	}
}
